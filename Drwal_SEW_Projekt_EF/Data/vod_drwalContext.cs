// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Drwal_SEW_Projekt_EF.Models;

namespace Drwal_SEW_Projekt_EF.Data
{
    public partial class vod_drwalContext : DbContext
    {
        public vod_drwalContext()
        {
        }

        public vod_drwalContext(DbContextOptions<vod_drwalContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Actor> Actor { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Includes> Includes { get; set; }
        public virtual DbSet<MaterializedMegamoviesforkids> MaterializedMegamoviesforkids { get; set; }
        public virtual DbSet<Movie> Movie { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Subscription> Subscription { get; set; }
        public virtual DbSet<ViewAllclientsover18> ViewAllclientsover18 { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=localhost;Port=5432;Database=vod_drwal;User Id=postgres;Password=postgres;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Actor>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("actor_client_client_id_fk");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasIndex(e => e.ClientId, "client_client_id_uindex")
                    .IsUnique();

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("address");

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("firstname");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("lastname");

                entity.Property(e => e.Postalcode)
                    .HasMaxLength(20)
                    .HasColumnName("postalcode");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Ssn, "employee_ssn_uindex")
                    .IsUnique();

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.Ssn)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("ssn");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("employee_client_client_id_fk");
            });

            modelBuilder.Entity<Includes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("includes");

                entity.Property(e => e.MovieId).HasColumnName("movie_id");

                entity.Property(e => e.SubscriptionId).HasColumnName("subscription_id");

                entity.HasOne(d => d.Movie)
                    .WithMany()
                    .HasForeignKey(d => d.MovieId)
                    .HasConstraintName("includes_movie_movie_id_fk");

                entity.HasOne(d => d.Subscription)
                    .WithMany()
                    .HasForeignKey(d => d.SubscriptionId)
                    .HasConstraintName("includes_subscription_subscription_id_fk");
            });

            modelBuilder.Entity<MaterializedMegamoviesforkids>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("materialized_megamoviesforkids");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasColumnName("description");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .HasColumnName("title");

                entity.Property(e => e.Type)
                    .HasMaxLength(20)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<Movie>(entity =>
            {
                entity.HasIndex(e => e.MovieId, "movie_movie_id_uindex")
                    .IsUnique();

                entity.Property(e => e.MovieId).HasColumnName("movie_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasColumnName("description");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Is18plus).HasColumnName("is18plus");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.Type)
                    .HasMaxLength(20)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasIndex(e => e.OrderId, "order_order_id_uindex")
                    .IsUnique();

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.Payment)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("payment");

                entity.Property(e => e.Shipment)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("shipment");

                entity.Property(e => e.SubscriptionId).HasColumnName("subscription_id");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("order_client_client_id_fk");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("order_subscription_subscription_id_fk");
            });

            modelBuilder.Entity<Subscription>(entity =>
            {
                entity.HasIndex(e => e.SubscriptionId, "subscription_subscription_id_uindex")
                    .IsUnique();

                entity.Property(e => e.SubscriptionId).HasColumnName("subscription_id");

                entity.Property(e => e.Cost).HasColumnName("cost");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ViewAllclientsover18>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_allclientsover18");

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}