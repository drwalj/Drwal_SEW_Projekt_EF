// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using VodLib.models;

namespace VodLib.data
{
    public partial class vod_drwalContext : DbContext
    {
        public vod_drwalContext()
        {
        }

        public vod_drwalContext(DbContextOptions<vod_drwalContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Actor> Actor { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Movie> Movie { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Subscription> Subscription { get; set; }
        public virtual DbSet<includes> includes { get; set; }
        public virtual DbSet<materialized_megamoviesforkids> materialized_megamoviesforkids { get; set; }
        public virtual DbSet<view_allclientsover18> view_allclientsover18 { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=127.0.0.1;Port=5432;Database=vod_drwal;User Id=postgres;Password=postgres;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Actor>(entity =>
            {
                entity.HasOne(d => d.client)
                    .WithMany()
                    .HasForeignKey(d => d.client_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("actor_client_client_id_fk");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasKey(e => e.client_id)
                    .HasName("client_pk");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasOne(d => d.client)
                    .WithMany()
                    .HasForeignKey(d => d.client_id)
                    .HasConstraintName("employee_client_client_id_fk");
            });

            modelBuilder.Entity<Movie>(entity =>
            {
                entity.HasKey(e => e.movie_id)
                    .HasName("movie_pk");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.order_id)
                    .HasName("order_pk");

                entity.HasOne(d => d.client)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.client_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("order_client_client_id_fk");

                entity.HasOne(d => d.subscription)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.subscription_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("order_subscription_subscription_id_fk");
            });

            modelBuilder.Entity<Subscription>(entity =>
            {
                entity.HasKey(e => e.subscription_id)
                    .HasName("subscription_pk");
            });

            modelBuilder.Entity<includes>(entity =>
            {
                entity.HasOne(d => d.movie)
                    .WithMany()
                    .HasForeignKey(d => d.movie_id)
                    .HasConstraintName("includes_movie_movie_id_fk");

                entity.HasOne(d => d.subscription)
                    .WithMany()
                    .HasForeignKey(d => d.subscription_id)
                    .HasConstraintName("includes_subscription_subscription_id_fk");
            });

            modelBuilder.Entity<materialized_megamoviesforkids>(entity =>
            {
                entity.ToView("materialized_megamoviesforkids");
            });

            modelBuilder.Entity<view_allclientsover18>(entity =>
            {
                entity.ToView("view_allclientsover18");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}